import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
# import matplotlib.pyplot as plt
import streamlit as st
import plotly.graph_objects as go

st.title="üìàLinear regression"

st.markdown("# Linear regression")
st.sidebar.header("Linear regression")

uploaded_file = st.file_uploader("Select CSV-file", type=["csv"])



class LinReg:
    def __init__(self, learning_rate, n_epochs): #  –ó–∞–Ω–µ—Å–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–µ—â–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞(–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏, –≤–∏–¥, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–µ—Å–æ–≤)
        self.learning_rate = learning_rate # learning_rate
        self.n_epochs = n_epochs
            
    def fit(self, X, y): # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
        X = np.array(X)# –ü–µ—Ä–µ–≤–µ–¥–µ–º –≤ numpy –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        y = np.array(y)
        
        self.coef_ = np.random.normal(size=X.shape[1]) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å–∞
        self.intercept_ =  np.random.normal() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω w0
        
        for epoch in range(self.n_epochs):

            y_pred = self.intercept_ + X@self.coef_ # (162, 1)
            
            # 1. –ü–æ—Å—á–∏—Ç–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –æ–±—É—á–∞—é—â–µ–≥–æ:
            error = (y - y_pred)
            w0_grad = -2 * error # –ó–¥–µ—Å—å –ø–æ—Å—á–∏—Ç–∞–Ω–∞ —á–∞—Å—Ç–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è w0
            w_grad = -2 * X * error.reshape(-1, 1) #–ó–¥–µ—Å—å –ø–æ—Å—á–∏—Ç–∞–Ω—ã –≤—Å–µ —á–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ (w1, ..., wn) –¥–ª—è –≤—Å–µ—Ö 162 –æ–±—ä–µ–∫—Ç–æ–≤

            
            # 3. –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
            self.coef_ = self.coef_ - self.learning_rate * w_grad.mean(axis=0) # –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ 162 –æ–±—ä–µ–∫—Ç–∞–º –∫–∞–∂–¥—É—é –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à—É —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
            self.intercept_ = self.intercept_ - self.learning_rate * w0_grad.mean() # –£—Å—Ä–µ–¥–Ω—è–µ–º intercept_(—Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω w0) –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                       
    def predict(self, X): # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–æ—á–µ–∫
        X = np.array(X) # (n,2) (2, 1)
        return X@self.coef_ + self.intercept_
    
    def score(self, X, y):
        return r2_score(y, X@self.coef_ + self.intercept_) 

# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ DataFrame
if uploaded_file is not None:
    @st.cache_data
    def load_data(file):
        df = pd.read_csv(file)
        return df
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ—É–Ω–∫—Ü–∏—é load_data
    df_train = load_data(uploaded_file)

    target = st.selectbox('Select target', df_train.columns.unique(), index=len(df_train.columns.unique())-1)

    # if target:
    y_train = df_train[target]
    X_train = df_train.drop(columns=target)
    # else:
    #     st.warning("Please select at least one target column.")
    features = X_train.columns.to_list()

    rs = StandardScaler()
    X_train = rs.fit_transform(X_train)

    lr = st.number_input("Enter learning rate:", value=0.1)
    n_iters = int(st.number_input("Enter count of iterations:", value=1000, min_value=1, max_value=10000))

    my_lr = LinReg(learning_rate=lr, n_epochs=n_iters)
    my_lr.fit(X_train, y_train)

    st.subheader("Result:")
    weights_dict = dict(zip(features, my_lr.coef_)) # type: ignore
    
    st.write(weights_dict)

    y_pred = my_lr.predict(X_train)

    # def accuracy(y_pred, y_train):
    #     return np.sum(y_pred==y_train)/len(y_train)

    acc = my_lr.score(X_train, y_train)
    st.subheader(f'R2 csore = {np.round(acc, 3)}')  


    st.subheader("3D Graphic interpretation:")
    X_label = st.selectbox('Select feature for x-axis', features)
    features_copy = features.copy()
    features_copy.remove(X_label) # type: ignore
    Y_label = st.selectbox('Select feature for y-axis', features_copy)
    


    X = X_train[:, features.index(X_label)] # type: ignore
    Y = X_train[:, features.index(Y_label)] # type: ignore
    Pl = my_lr.predict(X_train)
    

    fig = go.Figure()

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    x_grid, y_grid = np.meshgrid(np.linspace(X.min(), X.max(), 10),
                                np.linspace(Y.min(),Y.max(), 10))
    X_grid = np.column_stack((x_grid.ravel(), y_grid.ravel()))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–æ—á–µ–∫
    z_pred = my_lr.predict(X_grid).reshape(x_grid.shape)

    fig.add_trace(go.Surface(x=x_grid, y=y_grid, z=z_pred, opacity=0.5, colorscale='Viridis', name='Prediction'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    fig.add_trace(go.Scatter3d(
        x=X,
        y=Y,
        z=y_train,
        mode='markers',
        marker=dict(
            color='red',
            size=2,
            opacity=0.5
        ),
        name='True',
        showlegend=True
    ))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    fig.add_trace(go.Scatter3d(
        x=X,
        y=Y,
        z=Pl,
        mode='markers',
        marker=dict(
            color='blue',
            size=1,
            opacity=0.5
        ),
        name='Pred',
        showlegend=True
    ))
       # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –æ—Å–µ–π
    fig.update_layout(showlegend=True)
    fig.update_layout(
    legend=dict(
        orientation="h",
        traceorder='normal',
        font=dict(
            family="Courier",
            size=18,
            color="black"
        ),
        itemsizing='constant'
    )
)

    st.plotly_chart(fig)